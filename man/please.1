.\" Automatically generated by Pandoc 2.2.1
.\"
.TH "PLEASE" "1" "16 August 2020" "please user manual" ""
.hy
.SH NAME
.PP
please \- a tool for access elevation.
.SH SYNOPSIS
.IP
.nf
\f[C]
please\ /bin/bash
please\ [\-t/\-\-target]\ backup\ tar\ \-cvf\ \-\ /home/data\ |\ ...
pleaseedit\ /etc/fstab
pleaseedit\ [\-r/\-\-reason]\ "new\ fs"\ /etc/fstab
please\ [\-l/\-\-list]
please\ [\-l/\-\-list]\ [\-t/\-\-target]\ user
please\ [\-d/\-\-dir]\ [dir]\ command
please\ [\-n/\-\-noprompt]\ command
please\ [\-r/\-\-reason]\ "sshd\ reconfigured,\ ticket\ 24365"\ /etc/init.d/ssh\ restart
please\ [\-p/\-\-purge]
please\ [\-w/\-\-warm]
\f[]
.fi
.SH DESCRIPTION
.PP
please is a sudo clone that has regex support and a simple approach to
ACL.
.PP
The aim is to allow admins to delegate accurate least privilege access
with ease.
There are times when what is intended to be executed can be expressed
easily with a regex to expose only what is needed and nothing more.
.PP
Executing with \f[C]\-d\ dir\f[] will change directory to dir prior to
execution.
\f[C]\-n\f[] will force please to exit with 1 if please would require a
password prior to execution.
\f[C]\-p\f[] will purge an existing token for the running user,
\f[C]\-w\f[] will warm the token and challenge authentication and
immediately exit.
.SH EXAMPLES
.PP
Run a shell as the httpd user:
.IP
.nf
\f[C]
please\ \-t\ httpd\ /bin/bash
\f[]
.fi
.PP
To list what you may run:
.IP
.nf
\f[C]
please\ \-l
\f[]
.fi
.PP
Or with \f[C]username\f[] to show what another user may run.
username must match the regex in a \f[C]permit=list\f[] rule.
.IP
.nf
\f[C]
please\ \-l\ username
\f[]
.fi
.SH FILES
.PP
/etc/please.ini
.SH CONTRIBUTIONS
.PP
I welcome pull requests with open arms.
.SH SEE ALSO
.PP
please.ini
.SH AUTHORS
Ed Neville (ed\-please\@s5h.net).
