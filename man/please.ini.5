.\" Automatically generated by Pandoc 2.2.1
.\"
.TH "PLEASE.INI" "5" "16 August 2020" "please user manual" ""
.hy
.SH NAME
.PP
please.ini \- configuration file for access
.SH DESCRIPTION
.PP
The \f[C]please.ini\f[] file contains the ACL for users of the
\f[C]please\f[] and \f[C]pleaseedit\f[] programs.
.PP
All rules in \f[C]please.ini\f[] will permit or deny based on command
regex matches.
.PP
\f[C]please.ini\f[] is an ini file, and as such it makes sense to label
the sections with a good short description of what the section provides.
You may then find this helpful when listing rights with
\f[C]please\ \-l\f[].
.PP
Rules are read and applied in the order they are presented in the
configuration file.
So if the user is permitted to run a command early in the file, but
later a deny is matches against \f[C]\&.*\f[], then the user will not be
permitted to run any command.
.PP
\f[C]%{USER}\f[] will expand to the user who is currently running
\f[C]please\f[], this enables a single rule for a group to modify/run
something that matches their name.
.PP
The properties in ini permitted are as follows:
.IP \[bu] 2
name=[regex], or user, mandatory
.IP \[bu] 2
target=[regex] user to execute or list as, defaults to root
.IP \[bu] 2
permit=[true|false] defaults to true
.IP \[bu] 2
require_pass=[true|false], defaults to true
.IP \[bu] 2
regex=[regex], is the regular expression that the command matches
against, defaults to ^$
.IP \[bu] 2
notbefore=[YYYYmmdd|YYYYmmddHHMMSS], defaults to never
.IP \[bu] 2
notafter=[YYYYmmdd|YYYYmmddHHMMSS], defaults to never
.IP \[bu] 2
datematch=[Day dd Mon HH:MM:SS UTC YYYY], regex to match against a date
string
.IP \[bu] 2
type=[edit/run/list], defaults to run, edit = pleaseedit entry, list =
user access rights listing
.IP \[bu] 2
group=[true|false] user, when true name refers to a group rather than a
user
.IP \[bu] 2
hostname=[regex], permitted hostnames where this may apply
.IP \[bu] 2
dir=[regex], permitted regex for switchable directories
.IP \[bu] 2
include=[file], read ini file, and continue to next section
.IP \[bu] 2
includedir=[directory], read .ini files in directory, and continue to
next section
.IP \[bu] 2
exitcmd=[program], run program after editor exits, if exit is zero,
continue with file replacement.
%{NEW} and %{OLD} expand to new and old edit files
.IP \[bu] 2
editmode=[octal mode], set replacement file to octal mode
.IP \[bu] 2
reason=[true|false], require a reason for execution, defaults to false
.IP \[bu] 2
last=[true|false], when true, stop processing if matched, defaults to
false
.IP \[bu] 2
syslog=[true|false], log this activity to syslog, defaults to true
.PP
\f[C]regex\f[] is a regular expression.
.SH EXAMPLE
.PP
Using an anchor (\f[C]^\f[]) for the regex field will be as good as
saying the rule should match any command.
.PP
If you wish to permit a user to view another's command set, then you may
do this using \f[C]type=list\f[] (\f[C]run\f[] by default).
To list another user, they must match the \f[C]target\f[] regex.
\f[C]type\f[] may also be \f[C]edit\f[] if you wish to permit a file
edit with \f[C]pleaseedit\f[].
.PP
\f[C]regex\f[] can include repetitions.
To permit running \f[C]wc\f[] to count the lines in the log files in
\f[C]/var/log\f[] you can use the following:
.IP
.nf
\f[C]
[user_ed_root]
name=ed
target=root
permit=true
regex=^/usr/bin/wc\ (/var/log/[a\-zA\-Z0\-9\-]+(\\.\\d+)?(\\s)?)+$
\f[]
.fi
.PP
This sort of regex will allow multiple instances of a \f[C]()\f[] group
with \f[C]+\f[], which is used to define the character class
\f[C][a\-zA\-Z0\-9\-]+\f[], the numeric class \f[C]\\d+\f[] and the
group near the end of the line.
In other words, multiple instances of files in /var/log that may end in
common log rotate forms \f[C]\-YYYYMMDD\f[] or \f[C]\&.N\f[].
.PP
This will permit commands such as the following, note how for efficiency
find will combine arguments with \f[C]\\+\f[] into fewer invocations.
\f[C]xargs\f[] could have been used in place of \f[C]find\f[].
.IP
.nf
\f[C]
$\ find\ /var/log\ \-type\ f\ \-exec\ please\ /usr/bin/wc\ {}\ \\+
\f[]
.fi
.SH OTHER EXAMPLES
.PP
User \f[C]ed\f[] may only start or stop a docker container:
.IP
.nf
\f[C]
[user_ed_root]
name=ed
target=root
permit=true
regex=^/usr/bin/docker\ (start|stop)\ \\S+
\f[]
.fi
.PP
User \f[C]ben\f[] may only edit \f[C]/etc/fstab\f[]:
.IP
.nf
\f[C]
[ben_fstab]
name=ben
target=root
permit=true
type=edit
regex=^/etc/fstab$
\f[]
.fi
.PP
User \f[C]ben\f[] may list only users \f[C]eng\f[], \f[C]net\f[] and
\f[C]dba\f[] operators:
.IP
.nf
\f[C]
[ben_ops]
name=ben
permit=true
type=list
target=^(eng|net|dba)ops$
\f[]
.fi
.SH EXITCMD
.PP
To verify a file edit, \f[C]ben\f[]'s entry to check \f[C]/etc/hosts\f[]
after edit could look like this:
.IP
.nf
\f[C]
[ben_ops]
name=ben
permit=true
type=edit
regex=^/etc/hosts$
exitcmd=/usr/local/bin/check_hosts\ %{OLD}\ ${NEW}
\f[]
.fi
.PP
\f[C]/usr/local/bin/check_hosts\f[] would take two arguments, the
original file as the first argument and the modify candidate as the
second argument.
If \f[C]check_hosts\f[] terminates zero, then the edit is considered
clean and the original file is replaced with the candidate.
Otherwise the edit file is not copied and is left, \f[C]pleaseedit\f[]
will exit with the return value from \f[C]check_hosts\f[].
.SH DATED RANGES
.PP
For large environments it is not unusual for a third party to require
access during a short time frame for debugging.
To accommodate this there are the \f[C]notbefore\f[] and
\f[C]notafter\f[] time brackets.
These can be either \f[C]YYYYmmdd\f[] or \f[C]YYYYMMDDHHMMSS\f[].
.PP
The whole day is considered when using the shorter date form of
\f[C]YYYYMMDD\f[].
.PP
Many enterprises may wish to permit access to a user for a limited time
only, even if that individual is in the role permanently.
.PP
User joker can do what they want as root on \f[C]1st\ April\ 2021\f[]:
.IP
.nf
\f[C]
[joker_april_first]
name=joker
target=root
permit=true
notbefore=20210401
notafter=20210401
regex=^/bin/bash
\f[]
.fi
.SH DATEMATCHES
.PP
Another date type is the \f[C]datematch\f[] item, this constrains
sections to a regex match against the date string
\f[C]Day\ dd\ mon\ HH:MM:SS\ UTC\ Year\f[].
.PP
You can permit some a group of users to perform some house keeping on a
Monday:
.IP
.nf
\f[C]
[l2_housekeeping]
name=l2users
group=true
target=root
permit=true
regex\ =\ /usr/local/housekeeping/.*
datematch\ =\ ^Thu\\s+1\\s+Oct\\s+22:00:00\\s+UTC\\s+2020
\f[]
.fi
.SH REASONS
.PP
When \f[C]true\f[], require a reason before permitting edits or
execution with the \f[C]\-r\f[] option.
Some organisations may prefer a reason to be logged when a command is
executed.
This can be helpful for some situations where something such as
\f[C]mkfs\f[] or \f[C]useradd\f[] might be preferable to be logged
against a ticket.
.IP
.nf
\f[C]
[l2_user_admin]
name=l2users
group=true
target=root
permit=true
reason=true
regex\ =\ ^/usr/sbin/useradd\\s+\-m\\s+\\w+$
\f[]
.fi
.SH LAST
.PP
To stop processing at a match, \f[C]last=true\f[] can be applied:
.IP
.nf
\f[C]
[mkfs]
name=l2users
group=true
target=root
permit=true
reason=true
regex\ =\ ^/sbin/mkfs.(ext[234]|xfs)\ /dev/sd[bcdefg]\\d?$
last=true
\f[]
.fi
.PP
For simplicity, there is no need to process other configured rules if
certain that the \f[C]l2users\f[] group are safe to execute this.
\f[C]last\f[] should only be used in situations where there will never
be something that could contradict the match later.
.SH FILES
.PP
/etc/please.ini
.SH CONTRIBUTIONS
.PP
I welcome pull requests with open arms.
.SH AUTHORS
Ed Neville (ed\-please\@s5h.net).
